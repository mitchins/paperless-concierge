name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Create test environment file
      run: |
        cat > .env << EOF
        TELEGRAM_BOT_TOKEN=mock_token_for_tests
        AUTH_MODE=global
        AUTHORIZED_USERS=123456789,987654321
        PAPERLESS_URL=http://mock-paperless:8000
        PAPERLESS_TOKEN=mock_paperless_token
        PAPERLESS_AI_URL=http://mock-ai:8080
        PAPERLESS_AI_TOKEN=mock_ai_token
        EOF

    - name: Run linting
      run: |
        pip install ruff
        ruff check --select=ALL --ignore=D,ANN,COM,DJ,EM,FBT,G,INP,ISC,N,PD,PGH,PIE,PT,PTH,Q,RET,RSE,S,SIM,TCH,TD,TRY,UP,ERA .

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=term --cov-report=html -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  quality-check:
    name: Quality Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov ruff bandit safety

    - name: Create test environment file
      run: |
        cat > .env << EOF
        TELEGRAM_BOT_TOKEN=mock_token_for_tests
        AUTH_MODE=global
        AUTHORIZED_USERS=123456789,987654321
        PAPERLESS_URL=http://mock-paperless:8000
        PAPERLESS_TOKEN=mock_paperless_token
        PAPERLESS_AI_URL=http://mock-ai:8080
        PAPERLESS_AI_TOKEN=mock_ai_token
        EOF

    - name: Run tests with coverage for SonarQube
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=term -v

    - name: Run security analysis
      run: |
        bandit -r . -f json -o bandit-report.json || true
        pip install --upgrade safety typer || true
        safety check --output json --save-as safety-report.json || true

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Test installation
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import bot, paperless_client, user_manager, document_tracker; print('âœ… All modules import successfully')"

    - name: Verify setup script
      run: |
        python setup.py --help
