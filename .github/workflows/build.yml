name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Create test environment file
      run: |
        cat > .env << EOF
        TELEGRAM_BOT_TOKEN=mock_token_for_tests
        AUTH_MODE=global
        AUTHORIZED_USERS=123456789,987654321
        PAPERLESS_URL=http://mock-paperless:8000
        PAPERLESS_TOKEN=mock_paperless_token
        PAPERLESS_AI_URL=http://mock-ai:8080
        PAPERLESS_AI_TOKEN=mock_ai_token
        EOF

    - name: Run pre-commit hooks
      run: |
        pip install pre-commit==3.5.0
        pre-commit run --all-files

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=term --cov-report=html -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@8f6ec407a34d5ec2b33d7d8f7f50279493b5efb4  # v5.5.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  quality-check:
    name: Quality Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Create test environment file
      run: |
        cat > .env << EOF
        TELEGRAM_BOT_TOKEN=mock_token_for_tests
        AUTH_MODE=global
        AUTHORIZED_USERS=123456789,987654321
        PAPERLESS_URL=http://mock-paperless:8000
        PAPERLESS_TOKEN=mock_paperless_token
        PAPERLESS_AI_URL=http://mock-ai:8080
        PAPERLESS_AI_TOKEN=mock_ai_token
        EOF

    - name: Run tests with coverage for SonarQube
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=term -v

    - name: Run security analysis
      run: |
        # Use project config and restrict analysis to application code
        bandit -c pyproject.toml -r src -f json -o bandit-report.json || true
        pip install --upgrade safety typer || true
        safety check --output json --save-as safety-report.json || true

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25  # v5.3.1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Create test environment file
      run: |
        cat > .env << EOF
        TELEGRAM_BOT_TOKEN=mock_token_for_tests
        AUTH_MODE=global
        AUTHORIZED_USERS=123456789,987654321
        PAPERLESS_URL=http://mock-paperless:8000
        PAPERLESS_TOKEN=mock_paperless_token
        PAPERLESS_AI_URL=http://mock-ai:8080
        PAPERLESS_AI_TOKEN=mock_ai_token
        EOF

    - name: Test installation
      run: |
        python -m pip install --upgrade pip
        pip install -e "."
        paperless-concierge --help

    - name: Verify package build
      run: |
        pip install build
        python -m build --wheel
