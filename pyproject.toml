[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "paperless-ngx-telegram-concierge"
description = "A Telegram bot for uploading documents and querying your Paperless-NGX instance"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Mitchell Currie", email = "your.email@example.com"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dynamic = ["version"]
dependencies = [
    "python-telegram-bot>=21.5",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "httpx>=0.25.0",
    "pyyaml>=6.0.1",
    "python-dateutil>=2.8.2",
    "diskcache>=5.6.3",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.0",
    "pytest-asyncio==0.23.7",
    "pytest-cov==4.1.0",
    "pytest-xdist==3.3.1",
    "pytest-httpx==0.30.0",
    "ruff==0.1.6",
    "black==23.11.0",
    "vulture==2.10",
    "bandit[toml]==1.7.9",
    "pre-commit==3.5.0",
    "safety==3.2.8",
]

[project.scripts]
paperless-concierge = "paperless_concierge.bot:main"
paperless-get-user-id = "paperless_concierge.cli.get_user_id:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
write_to = "src/paperless_concierge/_version.py"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
# Only essential rules - catch real bugs, not style issues
select = [
    "E9",     # Runtime errors (syntax errors, indentation)
    "F63",    # Invalid print statements
    "F7",     # Name/import errors
    "F82",    # Undefined names in __all__
    "F811",   # Redefined unused names
    "F821",   # Undefined name references
    "E722",   # Bare except clauses
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20", "PLR2004"]  # Allow print and magic values in tests

[tool.bandit]
exclude_dirs = ["tests", "venv"]
skips = ["B101", "B404", "B603", "B601"]  # Skip assert_used, subprocess imports, subprocess calls, shell_injection_process

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = "-v --tb=short --strict-markers -W error"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "setup.py",
    "venv/*",
    "*/__pycache__/*",
    "*.pyc",
    ".pytest_cache/*",
    ".ruff_cache/*",
    "htmlcov/*",
    ".paperless_concierge_cache/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
